// <auto-generated />
using System;
using BasisBookstore.Infraestructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BasisBookstore.Infraestructure.Migrations
{
    [DbContext(typeof(BookstoreContext))]
    [Migration("20240812012939_Create_View_BooksReports")]
    partial class Create_View_BooksReports
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CodAu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Codl");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Edition")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Edicao");

                    b.Property<string>("PublishedYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("Editora");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Codl");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CodAu");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Livro_Autor", (string)null);
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.BookPurchaseMethod", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Codl");

                    b.Property<int>("PurchaseMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CodFC");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Preco");

                    b.HasKey("BookId", "PurchaseMethodId");

                    b.HasIndex("PurchaseMethodId");

                    b.ToTable("Livro_Forma_Pagamento", (string)null);
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.BookSubject", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Codl");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CodAs");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Livro_Assunto", (string)null);
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.PurchaseMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CodFC");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("FormaCompra", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Balcão"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Self-service"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Internet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Evento"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Outros"
                        });
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CodAs");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Assunto", (string)null);
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Book", b =>
                {
                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.Subject", null)
                        .WithMany("Books")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.BookPurchaseMethod", b =>
                {
                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.Book", "Book")
                        .WithMany("BookPurchaseMethods")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.PurchaseMethod", "PurchaseMethod")
                        .WithMany("BookPurchaseMethods")
                        .HasForeignKey("PurchaseMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PurchaseMethod");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.BookSubject", b =>
                {
                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.Book", "Book")
                        .WithMany("BookSubjects")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basis.Bookstore.Core.Domain.Entities.Subject", "Subject")
                        .WithMany("BookSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPurchaseMethods");

                    b.Navigation("BookSubjects");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.PurchaseMethod", b =>
                {
                    b.Navigation("BookPurchaseMethods");
                });

            modelBuilder.Entity("Basis.Bookstore.Core.Domain.Entities.Subject", b =>
                {
                    b.Navigation("BookSubjects");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
